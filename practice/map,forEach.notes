// map vs foreach

// map and foreach are rare functions to loop through the items of the array

const arr = [2,5,3,4]

const mapResult = arr.map((ar)=>{

    return ar + 2;
})


const forEachResult = arr.forEach((ar, i)=>{
    arr[i] = ar + 3;

});

console.log(mapResult, forEachResult, arr);

//difference:

// for map we can cahin any methods like filter, fill etc but for forEach we cant add anything

GitHub Copilot: This code demonstrates the difference between the `map` and `forEach` methods in JavaScript when working with arrays.

### Code Explanation:

1. **Array Declaration**:
   ```javascript
   const arr = [2,5,3,4];
   ```
   An array `arr` is initialized with the values `[2, 5, 3, 4]`.

2. **Using `map`**:
   ```javascript
   const mapResult = arr.map((ar) => {
       return ar + 2;
   });
   ```
   - The `map` method is used to create a new array by applying a transformation to each element of the original array.
   - Here, each element of `arr` is incremented by 2, and the result is stored in `mapResult`.
   - `map` does **not** modify the original array; it returns a new array.

3. **Using `forEach`**:
   ```javascript
   const forEachResult = arr.forEach((ar, i) => {
       arr[i] = ar + 3;
   });
   ```
   - The `forEach` method is used to iterate over the array and perform an operation on each element.
   - Here, each element of `arr` is incremented by 3, and the original array `arr` is modified in place.
   - `forEach` does **not** return a new array; it returns `undefined`.

4. **Logging Results**:
   ```javascript
   console.log(mapResult, forEachResult, arr);
   ```
   - `mapResult` contains the new array `[4, 7, 5, 6]` (original values incremented by 2).
   - `forEachResult` is `undefined` because `forEach` does not return anything.
   - `arr` is modified to `[5, 8, 6, 7]` because `forEach` updated the original array.

5. **Comment on Differences**:
   ```javascript
   // for map we can chain any methods like filter, fill etc but for forEach we cant add anything
   ```
   - The comment highlights that `map` can be chained with other array methods (e.g., `filter`, `reduce`), while `forEach` cannot.

### Key Differences:
- **`map`**: Returns a new array, does not modify the original array, and supports chaining.
- **`forEach`**: Does not return a new array, modifies the original array (if explicitly coded), and does not support chaining.

uvhareesh: What are practical use cases?

GitHub Copilot: Here are some practical use cases for `map` and `forEach`:

### **Use Cases for `map`**
1. **Transforming Data**:
   - When you need to create a new array by transforming each element of an existing array.
   ```javascript
   const prices = [100, 200, 300];
   const discountedPrices = prices.map(price => price * 0.9);
   console.log(discountedPrices); // [90, 180, 270]
   ```

2. **Extracting Specific Properties**:
   - When working with an array of objects and you need to extract specific properties.
   ```javascript
   const users = [
       { id: 1, name: 'Alice' },
       { id: 2, name: 'Bob' }
   ];
   const userNames = users.map(user => user.name);
   console.log(userNames); // ['Alice', 'Bob']
   ```

3. **Chaining with Other Array Methods**:
   - When you need to transform data and then filter or reduce it.
   ```javascript
   const numbers = [1, 2, 3, 4];
   const result = numbers.map(num => num * 2).filter(num => num > 5);
   console.log(result); // [6, 8]
   ```

---

### **Use Cases for `forEach`**
1. **Performing Side Effects**:
   - When you need to perform an operation on each element without returning a new array.
   ```javascript
   const numbers = [1, 2, 3];
   numbers.forEach(num => console.log(num * 2));
   // Output: 2, 4, 6
   ```

2. **Modifying the Original Array**:
   - When you need to update the elements of the original array in place.
   ```javascript
   const numbers = [1, 2, 3];
   numbers.forEach((num, index, arr) => {
       arr[index] = num * 2;
   });
   console.log(numbers); // [2, 4, 6]
   ```

3. **Logging or Debugging**:
   - When you want to log or debug each element of an array.
   ```javascript
   const items = ['apple', 'banana', 'cherry'];
   items.forEach(item => console.log(`Item: ${item}`));
   ```

---

### **Key Difference in Use Cases**
- Use `map` when you need a **new array** with transformed data.
- Use `forEach` when you need to perform **side effects** or modify the original array.